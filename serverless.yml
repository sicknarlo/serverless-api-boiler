service: marketing-app

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-west-2

    # These environment variables are made available to our functions
  # under process.env.
  environment:
    redisHost: '${file(./config/${self:provider.stage}.json):redis.host}'
    redisPort: '${file(./config/${self:provider.stage}.json):redis.port}'

# functions:
#   getUser:
#     handler: handlers/users/get.main
#     events:
#       - http:
#           path: user/{id}
#           method: get
#           cors: true
#           authorizer: aws_iam
#   createStudent:
#     handler: handlers/students/create.main
#     events:
#       - http:
#           path: students
#           method: post
#           cors: true
#           authorizer: aws_iam
#   bulkCreateStudent:
#     handler: handlers/students/bulk.main
#     events:
#       - http:
#           path: students/bulk
#           method: post
#           cors: true
#           authorizer: aws_iam
#   getStudent:
#     handler: handlers/students/get.main
#     events:
#       - http:
#           path: students/{id}
#           method: get
#           cors: true
#           authorizer: aws_iam
#   listStudents:
#     handler: handlers/students/list.main
#     events:
#       - http:
#           path: students
#           method: get
#           cors: true
#           authorizer: aws_iam
#   updateStudent:
#     handler: handlers/students/update.main
#     events:
#       - http:
#           path: students/{id}
#           method: put
#           cors: true
#           authorizer: aws_iam
#   deleteStudent:
#     handler: handlers/students/delete.main
#     events:
#       - http:
#           path: students/{id}
#           method: delete
#           cors: true
#           authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}